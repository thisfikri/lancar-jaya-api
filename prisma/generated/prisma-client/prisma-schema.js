module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateAppSetting {
  count: Int!
}

type AggregateFile {
  count: Int!
}

type AggregateFolder {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateUserSetting {
  count: Int!
}

type AppSetting {
  id: ID!
  name: String!
  value: String!
  userId: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type AppSettingConnection {
  pageInfo: PageInfo!
  edges: [AppSettingEdge]!
  aggregate: AggregateAppSetting!
}

input AppSettingCreateInput {
  id: ID
  name: String!
  value: String!
  userId: ID!
}

type AppSettingEdge {
  node: AppSetting!
  cursor: String!
}

enum AppSettingOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  value_ASC
  value_DESC
  userId_ASC
  userId_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type AppSettingPreviousValues {
  id: ID!
  name: String!
  value: String!
  userId: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type AppSettingSubscriptionPayload {
  mutation: MutationType!
  node: AppSetting
  updatedFields: [String!]
  previousValues: AppSettingPreviousValues
}

input AppSettingSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: AppSettingWhereInput
  AND: [AppSettingSubscriptionWhereInput!]
  OR: [AppSettingSubscriptionWhereInput!]
  NOT: [AppSettingSubscriptionWhereInput!]
}

input AppSettingUpdateInput {
  name: String
  value: String
  userId: ID
}

input AppSettingUpdateManyMutationInput {
  name: String
  value: String
  userId: ID
}

input AppSettingWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  value: String
  value_not: String
  value_in: [String!]
  value_not_in: [String!]
  value_lt: String
  value_lte: String
  value_gt: String
  value_gte: String
  value_contains: String
  value_not_contains: String
  value_starts_with: String
  value_not_starts_with: String
  value_ends_with: String
  value_not_ends_with: String
  userId: ID
  userId_not: ID
  userId_in: [ID!]
  userId_not_in: [ID!]
  userId_lt: ID
  userId_lte: ID
  userId_gt: ID
  userId_gte: ID
  userId_contains: ID
  userId_not_contains: ID
  userId_starts_with: ID
  userId_not_starts_with: ID
  userId_ends_with: ID
  userId_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [AppSettingWhereInput!]
  OR: [AppSettingWhereInput!]
  NOT: [AppSettingWhereInput!]
}

input AppSettingWhereUniqueInput {
  id: ID
}

type BatchPayload {
  count: Long!
}

scalar DateTime

type File {
  id: ID!
  name: String!
  size: Int!
  path: String!
  folderPath: String!
  createdBy: User!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type FileConnection {
  pageInfo: PageInfo!
  edges: [FileEdge]!
  aggregate: AggregateFile!
}

input FileCreateInput {
  id: ID
  name: String!
  size: Int!
  path: String!
  folderPath: String!
  createdBy: UserCreateOneWithoutFilesInput!
}

input FileCreateManyInput {
  create: [FileCreateInput!]
  connect: [FileWhereUniqueInput!]
}

input FileCreateManyWithoutCreatedByInput {
  create: [FileCreateWithoutCreatedByInput!]
  connect: [FileWhereUniqueInput!]
}

input FileCreateWithoutCreatedByInput {
  id: ID
  name: String!
  size: Int!
  path: String!
  folderPath: String!
}

type FileEdge {
  node: File!
  cursor: String!
}

enum FileOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  size_ASC
  size_DESC
  path_ASC
  path_DESC
  folderPath_ASC
  folderPath_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type FilePreviousValues {
  id: ID!
  name: String!
  size: Int!
  path: String!
  folderPath: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

input FileScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  size: Int
  size_not: Int
  size_in: [Int!]
  size_not_in: [Int!]
  size_lt: Int
  size_lte: Int
  size_gt: Int
  size_gte: Int
  path: String
  path_not: String
  path_in: [String!]
  path_not_in: [String!]
  path_lt: String
  path_lte: String
  path_gt: String
  path_gte: String
  path_contains: String
  path_not_contains: String
  path_starts_with: String
  path_not_starts_with: String
  path_ends_with: String
  path_not_ends_with: String
  folderPath: String
  folderPath_not: String
  folderPath_in: [String!]
  folderPath_not_in: [String!]
  folderPath_lt: String
  folderPath_lte: String
  folderPath_gt: String
  folderPath_gte: String
  folderPath_contains: String
  folderPath_not_contains: String
  folderPath_starts_with: String
  folderPath_not_starts_with: String
  folderPath_ends_with: String
  folderPath_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [FileScalarWhereInput!]
  OR: [FileScalarWhereInput!]
  NOT: [FileScalarWhereInput!]
}

type FileSubscriptionPayload {
  mutation: MutationType!
  node: File
  updatedFields: [String!]
  previousValues: FilePreviousValues
}

input FileSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: FileWhereInput
  AND: [FileSubscriptionWhereInput!]
  OR: [FileSubscriptionWhereInput!]
  NOT: [FileSubscriptionWhereInput!]
}

input FileUpdateDataInput {
  name: String
  size: Int
  path: String
  folderPath: String
  createdBy: UserUpdateOneRequiredWithoutFilesInput
}

input FileUpdateInput {
  name: String
  size: Int
  path: String
  folderPath: String
  createdBy: UserUpdateOneRequiredWithoutFilesInput
}

input FileUpdateManyDataInput {
  name: String
  size: Int
  path: String
  folderPath: String
}

input FileUpdateManyInput {
  create: [FileCreateInput!]
  update: [FileUpdateWithWhereUniqueNestedInput!]
  upsert: [FileUpsertWithWhereUniqueNestedInput!]
  delete: [FileWhereUniqueInput!]
  connect: [FileWhereUniqueInput!]
  set: [FileWhereUniqueInput!]
  disconnect: [FileWhereUniqueInput!]
  deleteMany: [FileScalarWhereInput!]
  updateMany: [FileUpdateManyWithWhereNestedInput!]
}

input FileUpdateManyMutationInput {
  name: String
  size: Int
  path: String
  folderPath: String
}

input FileUpdateManyWithoutCreatedByInput {
  create: [FileCreateWithoutCreatedByInput!]
  delete: [FileWhereUniqueInput!]
  connect: [FileWhereUniqueInput!]
  set: [FileWhereUniqueInput!]
  disconnect: [FileWhereUniqueInput!]
  update: [FileUpdateWithWhereUniqueWithoutCreatedByInput!]
  upsert: [FileUpsertWithWhereUniqueWithoutCreatedByInput!]
  deleteMany: [FileScalarWhereInput!]
  updateMany: [FileUpdateManyWithWhereNestedInput!]
}

input FileUpdateManyWithWhereNestedInput {
  where: FileScalarWhereInput!
  data: FileUpdateManyDataInput!
}

input FileUpdateWithoutCreatedByDataInput {
  name: String
  size: Int
  path: String
  folderPath: String
}

input FileUpdateWithWhereUniqueNestedInput {
  where: FileWhereUniqueInput!
  data: FileUpdateDataInput!
}

input FileUpdateWithWhereUniqueWithoutCreatedByInput {
  where: FileWhereUniqueInput!
  data: FileUpdateWithoutCreatedByDataInput!
}

input FileUpsertWithWhereUniqueNestedInput {
  where: FileWhereUniqueInput!
  update: FileUpdateDataInput!
  create: FileCreateInput!
}

input FileUpsertWithWhereUniqueWithoutCreatedByInput {
  where: FileWhereUniqueInput!
  update: FileUpdateWithoutCreatedByDataInput!
  create: FileCreateWithoutCreatedByInput!
}

input FileWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  size: Int
  size_not: Int
  size_in: [Int!]
  size_not_in: [Int!]
  size_lt: Int
  size_lte: Int
  size_gt: Int
  size_gte: Int
  path: String
  path_not: String
  path_in: [String!]
  path_not_in: [String!]
  path_lt: String
  path_lte: String
  path_gt: String
  path_gte: String
  path_contains: String
  path_not_contains: String
  path_starts_with: String
  path_not_starts_with: String
  path_ends_with: String
  path_not_ends_with: String
  folderPath: String
  folderPath_not: String
  folderPath_in: [String!]
  folderPath_not_in: [String!]
  folderPath_lt: String
  folderPath_lte: String
  folderPath_gt: String
  folderPath_gte: String
  folderPath_contains: String
  folderPath_not_contains: String
  folderPath_starts_with: String
  folderPath_not_starts_with: String
  folderPath_ends_with: String
  folderPath_not_ends_with: String
  createdBy: UserWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [FileWhereInput!]
  OR: [FileWhereInput!]
  NOT: [FileWhereInput!]
}

input FileWhereUniqueInput {
  id: ID
  path: String
}

type Folder {
  id: ID!
  name: String!
  files(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [File!]
  parentFolder: ID!
  childFolder: [ID!]!
  createdBy: User!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type FolderConnection {
  pageInfo: PageInfo!
  edges: [FolderEdge]!
  aggregate: AggregateFolder!
}

input FolderCreatechildFolderInput {
  set: [ID!]
}

input FolderCreateInput {
  id: ID
  name: String!
  files: FileCreateManyInput
  parentFolder: ID!
  childFolder: FolderCreatechildFolderInput
  createdBy: UserCreateOneInput!
}

type FolderEdge {
  node: Folder!
  cursor: String!
}

enum FolderOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  parentFolder_ASC
  parentFolder_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type FolderPreviousValues {
  id: ID!
  name: String!
  parentFolder: ID!
  childFolder: [ID!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type FolderSubscriptionPayload {
  mutation: MutationType!
  node: Folder
  updatedFields: [String!]
  previousValues: FolderPreviousValues
}

input FolderSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: FolderWhereInput
  AND: [FolderSubscriptionWhereInput!]
  OR: [FolderSubscriptionWhereInput!]
  NOT: [FolderSubscriptionWhereInput!]
}

input FolderUpdatechildFolderInput {
  set: [ID!]
}

input FolderUpdateInput {
  name: String
  files: FileUpdateManyInput
  parentFolder: ID
  childFolder: FolderUpdatechildFolderInput
  createdBy: UserUpdateOneRequiredInput
}

input FolderUpdateManyMutationInput {
  name: String
  parentFolder: ID
  childFolder: FolderUpdatechildFolderInput
}

input FolderWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  files_every: FileWhereInput
  files_some: FileWhereInput
  files_none: FileWhereInput
  parentFolder: ID
  parentFolder_not: ID
  parentFolder_in: [ID!]
  parentFolder_not_in: [ID!]
  parentFolder_lt: ID
  parentFolder_lte: ID
  parentFolder_gt: ID
  parentFolder_gte: ID
  parentFolder_contains: ID
  parentFolder_not_contains: ID
  parentFolder_starts_with: ID
  parentFolder_not_starts_with: ID
  parentFolder_ends_with: ID
  parentFolder_not_ends_with: ID
  createdBy: UserWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [FolderWhereInput!]
  OR: [FolderWhereInput!]
  NOT: [FolderWhereInput!]
}

input FolderWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createAppSetting(data: AppSettingCreateInput!): AppSetting!
  updateAppSetting(data: AppSettingUpdateInput!, where: AppSettingWhereUniqueInput!): AppSetting
  updateManyAppSettings(data: AppSettingUpdateManyMutationInput!, where: AppSettingWhereInput): BatchPayload!
  upsertAppSetting(where: AppSettingWhereUniqueInput!, create: AppSettingCreateInput!, update: AppSettingUpdateInput!): AppSetting!
  deleteAppSetting(where: AppSettingWhereUniqueInput!): AppSetting
  deleteManyAppSettings(where: AppSettingWhereInput): BatchPayload!
  createFile(data: FileCreateInput!): File!
  updateFile(data: FileUpdateInput!, where: FileWhereUniqueInput!): File
  updateManyFiles(data: FileUpdateManyMutationInput!, where: FileWhereInput): BatchPayload!
  upsertFile(where: FileWhereUniqueInput!, create: FileCreateInput!, update: FileUpdateInput!): File!
  deleteFile(where: FileWhereUniqueInput!): File
  deleteManyFiles(where: FileWhereInput): BatchPayload!
  createFolder(data: FolderCreateInput!): Folder!
  updateFolder(data: FolderUpdateInput!, where: FolderWhereUniqueInput!): Folder
  updateManyFolders(data: FolderUpdateManyMutationInput!, where: FolderWhereInput): BatchPayload!
  upsertFolder(where: FolderWhereUniqueInput!, create: FolderCreateInput!, update: FolderUpdateInput!): Folder!
  deleteFolder(where: FolderWhereUniqueInput!): Folder
  deleteManyFolders(where: FolderWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  createUserSetting(data: UserSettingCreateInput!): UserSetting!
  updateUserSetting(data: UserSettingUpdateInput!, where: UserSettingWhereUniqueInput!): UserSetting
  updateManyUserSettings(data: UserSettingUpdateManyMutationInput!, where: UserSettingWhereInput): BatchPayload!
  upsertUserSetting(where: UserSettingWhereUniqueInput!, create: UserSettingCreateInput!, update: UserSettingUpdateInput!): UserSetting!
  deleteUserSetting(where: UserSettingWhereUniqueInput!): UserSetting
  deleteManyUserSettings(where: UserSettingWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  appSetting(where: AppSettingWhereUniqueInput!): AppSetting
  appSettings(where: AppSettingWhereInput, orderBy: AppSettingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [AppSetting]!
  appSettingsConnection(where: AppSettingWhereInput, orderBy: AppSettingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AppSettingConnection!
  file(where: FileWhereUniqueInput!): File
  files(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [File]!
  filesConnection(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FileConnection!
  folder(where: FolderWhereUniqueInput!): Folder
  folders(where: FolderWhereInput, orderBy: FolderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Folder]!
  foldersConnection(where: FolderWhereInput, orderBy: FolderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FolderConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  userSetting(where: UserSettingWhereUniqueInput!): UserSetting
  userSettings(where: UserSettingWhereInput, orderBy: UserSettingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [UserSetting]!
  userSettingsConnection(where: UserSettingWhereInput, orderBy: UserSettingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserSettingConnection!
  node(id: ID!): Node
}

type Subscription {
  appSetting(where: AppSettingSubscriptionWhereInput): AppSettingSubscriptionPayload
  file(where: FileSubscriptionWhereInput): FileSubscriptionPayload
  folder(where: FolderSubscriptionWhereInput): FolderSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  userSetting(where: UserSettingSubscriptionWhereInput): UserSettingSubscriptionPayload
}

type User {
  id: ID!
  firstName: String!
  lastName: String!
  username: String!
  password: String!
  email: String!
  role: String!
  files(where: FileWhereInput, orderBy: FileOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [File!]
  storagePath: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  profilePic: String!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  firstName: String!
  lastName: String!
  username: String!
  password: String!
  email: String!
  role: String!
  files: FileCreateManyWithoutCreatedByInput
  storagePath: String!
  profilePic: String!
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutFilesInput {
  create: UserCreateWithoutFilesInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutFilesInput {
  id: ID
  firstName: String!
  lastName: String!
  username: String!
  password: String!
  email: String!
  role: String!
  storagePath: String!
  profilePic: String!
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  username_ASC
  username_DESC
  password_ASC
  password_DESC
  email_ASC
  email_DESC
  role_ASC
  role_DESC
  storagePath_ASC
  storagePath_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  profilePic_ASC
  profilePic_DESC
}

type UserPreviousValues {
  id: ID!
  firstName: String!
  lastName: String!
  username: String!
  password: String!
  email: String!
  role: String!
  storagePath: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  profilePic: String!
}

type UserSetting {
  id: ID!
  name: String!
  value: String!
  userId: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserSettingConnection {
  pageInfo: PageInfo!
  edges: [UserSettingEdge]!
  aggregate: AggregateUserSetting!
}

input UserSettingCreateInput {
  id: ID
  name: String!
  value: String!
  userId: ID!
}

type UserSettingEdge {
  node: UserSetting!
  cursor: String!
}

enum UserSettingOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  value_ASC
  value_DESC
  userId_ASC
  userId_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserSettingPreviousValues {
  id: ID!
  name: String!
  value: String!
  userId: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserSettingSubscriptionPayload {
  mutation: MutationType!
  node: UserSetting
  updatedFields: [String!]
  previousValues: UserSettingPreviousValues
}

input UserSettingSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserSettingWhereInput
  AND: [UserSettingSubscriptionWhereInput!]
  OR: [UserSettingSubscriptionWhereInput!]
  NOT: [UserSettingSubscriptionWhereInput!]
}

input UserSettingUpdateInput {
  name: String
  value: String
  userId: ID
}

input UserSettingUpdateManyMutationInput {
  name: String
  value: String
  userId: ID
}

input UserSettingWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  value: String
  value_not: String
  value_in: [String!]
  value_not_in: [String!]
  value_lt: String
  value_lte: String
  value_gt: String
  value_gte: String
  value_contains: String
  value_not_contains: String
  value_starts_with: String
  value_not_starts_with: String
  value_ends_with: String
  value_not_ends_with: String
  userId: ID
  userId_not: ID
  userId_in: [ID!]
  userId_not_in: [ID!]
  userId_lt: ID
  userId_lte: ID
  userId_gt: ID
  userId_gte: ID
  userId_contains: ID
  userId_not_contains: ID
  userId_starts_with: ID
  userId_not_starts_with: ID
  userId_ends_with: ID
  userId_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [UserSettingWhereInput!]
  OR: [UserSettingWhereInput!]
  NOT: [UserSettingWhereInput!]
}

input UserSettingWhereUniqueInput {
  id: ID
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateDataInput {
  firstName: String
  lastName: String
  username: String
  password: String
  email: String
  role: String
  files: FileUpdateManyWithoutCreatedByInput
  storagePath: String
  profilePic: String
}

input UserUpdateInput {
  firstName: String
  lastName: String
  username: String
  password: String
  email: String
  role: String
  files: FileUpdateManyWithoutCreatedByInput
  storagePath: String
  profilePic: String
}

input UserUpdateManyMutationInput {
  firstName: String
  lastName: String
  username: String
  password: String
  email: String
  role: String
  storagePath: String
  profilePic: String
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutFilesInput {
  create: UserCreateWithoutFilesInput
  update: UserUpdateWithoutFilesDataInput
  upsert: UserUpsertWithoutFilesInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutFilesDataInput {
  firstName: String
  lastName: String
  username: String
  password: String
  email: String
  role: String
  storagePath: String
  profilePic: String
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutFilesInput {
  update: UserUpdateWithoutFilesDataInput!
  create: UserCreateWithoutFilesInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  firstName: String
  firstName_not: String
  firstName_in: [String!]
  firstName_not_in: [String!]
  firstName_lt: String
  firstName_lte: String
  firstName_gt: String
  firstName_gte: String
  firstName_contains: String
  firstName_not_contains: String
  firstName_starts_with: String
  firstName_not_starts_with: String
  firstName_ends_with: String
  firstName_not_ends_with: String
  lastName: String
  lastName_not: String
  lastName_in: [String!]
  lastName_not_in: [String!]
  lastName_lt: String
  lastName_lte: String
  lastName_gt: String
  lastName_gte: String
  lastName_contains: String
  lastName_not_contains: String
  lastName_starts_with: String
  lastName_not_starts_with: String
  lastName_ends_with: String
  lastName_not_ends_with: String
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  role: String
  role_not: String
  role_in: [String!]
  role_not_in: [String!]
  role_lt: String
  role_lte: String
  role_gt: String
  role_gte: String
  role_contains: String
  role_not_contains: String
  role_starts_with: String
  role_not_starts_with: String
  role_ends_with: String
  role_not_ends_with: String
  files_every: FileWhereInput
  files_some: FileWhereInput
  files_none: FileWhereInput
  storagePath: String
  storagePath_not: String
  storagePath_in: [String!]
  storagePath_not_in: [String!]
  storagePath_lt: String
  storagePath_lte: String
  storagePath_gt: String
  storagePath_gte: String
  storagePath_contains: String
  storagePath_not_contains: String
  storagePath_starts_with: String
  storagePath_not_starts_with: String
  storagePath_ends_with: String
  storagePath_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  profilePic: String
  profilePic_not: String
  profilePic_in: [String!]
  profilePic_not_in: [String!]
  profilePic_lt: String
  profilePic_lte: String
  profilePic_gt: String
  profilePic_gte: String
  profilePic_contains: String
  profilePic_not_contains: String
  profilePic_starts_with: String
  profilePic_not_starts_with: String
  profilePic_ends_with: String
  profilePic_not_ends_with: String
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  username: String
  email: String
  storagePath: String
  profilePic: String
}
`
      }
    